---
title: "Avocado Price Prediction"
format: pptx
editor: visual
---

## Description of the project

For our project we reproduced the [avocado price analysis from Kaggle](https://www.kaggle.com/code/anitha136/avocado-price-prediction).

The original analysis has been written in Python language and the code can be found in file ***translated_code_with_old_data/avocado-price-prediction.ipynb***.

The translated version of the code in R can be found in ***translated_code_with_old_data/avocado.R***.

They both use data specified in the source article and the new code reproduces the same results.

Later on we used the new code to update [the data with 2019-2020 values](https://www.kaggle.com/datasets/timmate/avocado-prices-2020). In the presentation we will explore the differences between old and new results.

```{r}
library(ggplot2)
library(gridExtra)
library(sjmisc)
library(knitr)
library(tidyverse)
library(grid)
load("translated_code_with_old_data/avocado_old.Rdata")
load("translated_code_with_new_data/avocado_new.Rdata")

avocado_old <- avocado_old %>% 
    rename(Type_organic = type_organic, Year = year, Region = region)
avocado <- bind_rows(avocado_old, avocado_new)
```

***The timeline***

```{r include = FALSE}
date_range_old <- paste(min(avocado_old$Date), "to", max(avocado_old$Date))
date_range_old2 <- max(avocado_old$Date) - min(avocado_old$Date)

date_range_new <- paste(min(avocado_new$Date), "to", max(avocado_new$Date))
date_range_new2 <- max(avocado_new$Date) - min(avocado_new$Date)

```

Date range in original dataset is `r date_range_old`. Available `r date_range_old2` days.

Date range in updated dataset is `r date_range_new`. Available `r date_range_new2` days.

```{r}
price_data <- bind_rows(avocado_new %>% 
    select(Date, AveragePrice) %>% 
    mutate(dataset = "avocado_new"),
    avocado_old %>% 
    select(Date, AveragePrice) %>% 
    mutate(dataset = "avocado_old")) %>% 
    group_by(Date, dataset) %>% 
    summarise_all(mean) %>% 
    ungroup()

ggplot(price_data, aes(x = Date, y = AveragePrice, color=dataset)) + 
  geom_line()
```

## Spread of Average Price in the data

\* The average price of avocados in the old dataset is lower than the average price in the new dataset

\* The minimum price in the old dataset is lower than the minimum price in the new dataset and the maximum price in the old dataset is higher than the maximum price in the new dataset. Hence, the spread of prices is larger in the old dataset than in the spread of prices in the new dataset.

\* The distribution of prices is fairly similar in both dataset, however, the distribution of prices in the old dataset is slightly more positively skewed.

**Old dataset**

```{r}
summary(avocado_old[,"AveragePrice"])
```

**New dataset**

```{r}
summary(avocado_new[,"AveragePrice"])
```

```{r}
p1 <- ggplot(avocado_old, aes(x = AveragePrice)) +
  geom_density(fill = "blue", alpha = 0.5) +
  labs(x = "Distribution of Average price in old dataset", y="Density")

p2 <- ggplot(avocado_new, aes(x = AveragePrice)) +
  geom_density(fill = "green", alpha = 0.5) +
  labs(x = "Distribution of Average price in new dataset", y="Density")

grid.arrange(p1, p2, nrow = 1)
```

## Type of avocado vs Average Price

**Organic avocados**

\* The average price of organic avocados dropped 2018-2020 when compared to 2015-2018

\* The prices corresponding to the first quartile, median and third quartile (the whole box) are higher in old dataset

\* The interquartile range is larger in the 2015-2018 dataset than in the new dataset

\* The difference between the minimum price and first quartile excluding outliers is larger in the old dataset than in the new dataset

\* The difference between the maximum price and third quartile excluding outliers is larger in the new dataset than in the old dataset

**Conventional avocados**

\* The average price of conventional avocados is fairly similar in both datasets

\* The prices corresponding to the first quartile and median are also almost the same

\* The price corresponding to the third quartile is higher in the old dataset than in the new dataset

\* Similarly like for the organic avocados, interquartile range is larger in the 2015-2018 dataset than in the new dataset

\* The difference between the minimum price and first quartile excluding outliers is similar in both datasets

\* The difference between the maximum price and third quartile excluding outliers is larger in the old dataset than in the new dataset

```{r}
p3 <- ggplot(avocado_old, aes(x = Type_organic, y = AveragePrice, color=Type_organic)) + 
  geom_boxplot()+
  scale_y_continuous(limits = c(0,2.5))+
  labs(title="Average Price of one Avocado by type",
       x="Type",y="Average Price",
       color="Type")+ 
  theme_minimal()

p4 <- ggplot(avocado_new, aes(x = Type_organic, y = AveragePrice, color=Type_organic)) + 
  geom_boxplot()+
  scale_y_continuous(limits = c(0,2.5))+
  labs(title="Average Price of one Avocado by type",
       x="Type",y="Average Price",
       color="Type")+ 
  theme_minimal()

grid.arrange(p3, p4, nrow = 1)
```

## Average price over the years

Year by year the average price of avocados decreased, with the exception of 2017 and 2019.

The largest difference between the two plots is that the interquartile ranges on the first plot are much larger than the plots on the second plot.

```{r}

avocado_old$Year<-as.character(avocado_old$Year)
p5<-ggplot(avocado_old, aes(x = Year, y = AveragePrice, color=Year)) + 
  geom_boxplot()+
  scale_y_continuous(limits = c(0,2.5))+
  labs(title="Average Price of one Avocado by type",
       x="Type",y="Average Price",
       color="Type")+ 
  theme_minimal()

avocado_new$Year<-as.character(avocado_new$Year)
p6<-ggplot(avocado_new, aes(x = Year, y = AveragePrice, color=Year)) + 
  geom_boxplot()+
  scale_y_continuous(limits = c(0,2.5))+
  labs(title="Average Price of one Avocado by type",
       x="Type",y="Average Price",
       color="Type")+ 
  theme_minimal()


grid.arrange(p5, p6, nrow = 1)

```

## Average price variations across regions

The in case of both datasets, the average price of avocado vary by region.

Based on the old dataset region18 has the highest price, whereas for new dataset region 43 has the highest price.

```{r}

region_sum_old <- aggregate(AveragePrice ~ Region, avocado_old, sum)
region_sum_old <- region_sum_old[order(-region_sum_old$AveragePrice), ]
barplot(region_sum_old$AveragePrice, names.arg = region_sum_old$Region, space=0,
        xlab = "Region", ylab = "Total Average Price",
        main = "Total Average Price by Region", col = "green",
        xlim = c(0, 54),
        ylim = c(0, max(region_sum_old$AveragePrice) + 100))



region_sum_new <- aggregate(AveragePrice ~ Region, avocado_new, sum)
region_sum_new <- region_sum_new[order(-region_sum_new$AveragePrice), ]
barplot(region_sum_new$AveragePrice, names.arg = region_sum_new$Region, space=0,
        xlab = "Region", ylab = "Total Average Price",
        main = "Total Average Price by Region", col = "green",
        xlim = c(0, 54),
        ylim = c(0, max(region_sum_new$AveragePrice) + 100))


```

## Linear Regression

**old data**

RMSE for training set is 0.7695706 and RMSE for test set is 0.7730437

R-squared for train data 0.4066575 and adjusted R-squared for train data 0.4062101

R-squared for test data 0.4066261 and Adjusted R-squared for test data 0.404832

**new data**

RMSE for training set is 0.7474077 and RMSE for test set is 0.7558599

R-squared for train data 0.4404934 and adjusted R-squared for train data 0.4399691

R-squared for test data 0.4316524 and Adjusted R-squared for test data 0.4295158

**interpretation**

RMSE - both models have similar results for train and test samples, the results are slightly closer to zero for new dataset (2018-2020)

R-squared - variables in the first model explain 40% of the variance; variables in the first model explain 43% of the variance

## Random Forest Regression

**old data**

RMSE for training set is 0.1828957 and RMSE for test set is 0.395934

R-squared for train data 0.966496 and adjusted R-squared for train data 0.9664646

R-squared for test data 0.844053 and Adjusted R-squared for test data 0.8434668

**new data**

RMSE for training set is 0.1826819 and RMSE for test set is 0.3921682

R-squared for train data 0.9665742 and adjusted R-squared for train data 0.9665429

R-squared for test data 0.8470054 and Adjusted R-squared for test data 0.8464302

**interpretation**

RMSE - for both datasets the value is closer to 0 for random forest than for linear regression

R-squared - regardless of the dataset used the value for training sample indicates that the variables explain 97% of the variance; for test data the variables explain 84% of the variance

## Advantages of reproducing the code in R

1.  Language Flexibility: By reproducing Python code in R, one can leverage the strengths of each language. R is more of a statistical programming language, whereas python is more versatile.

2.  Code Reusability: Reproducing code from one language to another allows you to reuse existing algorithms, functions or data processing methods, which can save time. To reproduce the code we used already available packages: ggplot2, tidyverse, dplyr, caret, stats and randomForest

    For example: lm function used in R reproduction provides summary of the linear regression model such as coefficient estimates, p-values, confidence intervals, R-squared, adjusted R-squared and residual analysis.

3.  Collaborative Opportunity: Reproducing code in R from a Python allows for a collaboration between team members are experts in different programming languages.

4.  Learning Opportunity: Reproducing code from Python to R can be considered a valuable learning experience. It allows one to gain more experience in understanding the differences in programming paradigms, syntax and problem solving approaches.

5.  Validation and Cross-Checking: Reproducing previously published code provides an opportunity to validate the results obtained from the original code. If the obtained results match, the findings of the original study are strengthened. Moreover, such exercise can help with identifying potential errors or inconsistencies in the original code.
